package ptp_reporter

import (
	"encoding/xml"
	"fmt"
	"os"
	"strings"

	"github.com/onsi/ginkgo"
	"github.com/onsi/ginkgo/reporters"
	"github.com/onsi/ginkgo/types"
	"github.com/sirupsen/logrus"
)

var reporter *PTPJUnitReporter

type PTPReportEntry struct {
	name   string
	values []interface{}
}
type PTPJUnitReporter struct {
	*reporters.JUnitReporter
	reportFileName string
	// Maps a test case name to a list of report entries
	tcReportEntries map[string][]PTPReportEntry
}

func NewPTPJUnitReporter(filename string) *PTPJUnitReporter {
	// Create and save reporter as package's internal variable.
	reporter = &PTPJUnitReporter{
		reportFileName:  filename,
		JUnitReporter:   reporters.NewJUnitReporter(filename),
		tcReportEntries: map[string][]PTPReportEntry{},
	}

	return reporter
}

// Wrapper function for JUnitReporter's SpecSuiteDidEnd function.
//  1. Calls the standard JUnitReporter's SpecSuiteDidEnd func, which creates the xml file.
//  2. Unmarshals the gereated xml file, and serializes the stored test cases' report entries,
//     appending them to the existing <system-out> text.
//  3. Marshals the new test suite struct to the same file, overwriting it.
func (r *PTPJUnitReporter) SpecSuiteDidEnd(summary *types.SuiteSummary) {
	defer func() {
		// Make sure this reporter's report entries are removed in case its reused.
		r.tcReportEntries = map[string][]PTPReportEntry{}
	}()

	// Calls the standard SpecSuiteDidEnd to create the normal XML file.
	r.JUnitReporter.SpecSuiteDidEnd(summary)

	// Fast return if none of the test cases has report entries to be added to the xml.
	if len(r.tcReportEntries) == 0 {
		logrus.Infof("There's no extra TC information to add to the xml file.")
		return
	}

	// Read the xml file generated by the standard JUnitReporter to append our custom xml nodes
	xmlBytes, err := os.ReadFile(r.reportFileName)
	if err != nil {
		logrus.Errorf("failed to open xml file %s: %v", r.reportFileName, err)
		return
	}

	// Reparse the XML file, using our own custom test suite struct.
	ts := reporters.JUnitTestSuite{}
	err = xml.Unmarshal(xmlBytes, &ts)
	if err != nil {
		logrus.Errorf("failed to unmarshall ts xml from file %s: %v", r.reportFileName, err)
	}

	for i := range ts.TestCases {
		tc := &ts.TestCases[i]

		// Make sure of adding entries for TC names that match the junit report ones.
		reportEntries, tcNameFound := r.tcReportEntries[ts.TestCases[i].Name]
		if !tcNameFound {
			continue
		}

		// Attach report entries as extra system-out text.
		tc.SystemOut += "Report Entries:\n"
		for i := range reportEntries {
			entry := reportEntries[i]
			for _, val := range entry.values {
				var strVal string
				if stringer, ok := val.(fmt.Stringer); ok {
					strVal = stringer.String()
				} else {
					strVal = fmt.Sprintf("%+v", val)
				}

				tc.SystemOut += fmt.Sprintf("%s\n%s\n", entry.name, strVal)
			}

			if i+1 < len(reportEntries) {
				tc.SystemOut += "--\n"
			}
		}
	}

	outFile, err := os.Create(r.reportFileName)
	if err != nil {
		logrus.Errorf("failed to create file %s: %v", r.reportFileName, err)
		return
	}

	defer outFile.Close()

	// Marshal the updated test suite struct as it's done in junit_reporter.go
	_, err = outFile.WriteString(xml.Header)
	if err != nil {
		logrus.Errorf("failed to write xml header to %s: %v", r.reportFileName, err)
		return
	}

	encoder := xml.NewEncoder(outFile)
	encoder.Indent("  ", "    ")
	err = encoder.Encode(ts)
	if err == nil {
		logrus.Infof("JUnit report was updated with extra information for %d test cases: %s\n", len(r.tcReportEntries), r.reportFileName)
	} else {
		logrus.Errorf("Failed to generate JUnit report data in %s:\n\t%s", r.reportFileName, err.Error())
	}
}

func AddReportEntry(name string, args ...interface{}) {
	tcName := GetFullGinkgoTcName()
	logrus.Debugf("TC: %q: saving report entry %q, values %+v", tcName, name, args)

	if reporter == nil {
		logrus.Warn("Custom ptp reporter does not exist")
		return
	}

	entry := PTPReportEntry{
		name:   name,
		values: args,
	}

	if entries, exists := reporter.tcReportEntries[tcName]; exists {
		entries = append(entries, entry)
		reporter.tcReportEntries[tcName] = entries
	} else {
		reporter.tcReportEntries[tcName] = []PTPReportEntry{entry}
	}
}

// Exported as a variable so UTs can override it.
var GetFullGinkgoTcName = func() string {
	return strings.Join(ginkgo.CurrentGinkgoTestDescription().ComponentTexts, " ")
}
