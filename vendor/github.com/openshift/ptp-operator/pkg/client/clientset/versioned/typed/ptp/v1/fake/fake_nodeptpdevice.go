// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	ptpv1 "github.com/openshift/ptp-operator/api/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeNodePtpDevices implements NodePtpDeviceInterface
type FakeNodePtpDevices struct {
	Fake *FakePtpV1
	ns   string
}

var nodeptpdevicesResource = schema.GroupVersionResource{Group: "ptp.openshift.io", Version: "v1", Resource: "nodeptpdevices"}

var nodeptpdevicesKind = schema.GroupVersionKind{Group: "ptp.openshift.io", Version: "v1", Kind: "NodePtpDevice"}

// Get takes name of the nodePtpDevice, and returns the corresponding nodePtpDevice object, and an error if there is any.
func (c *FakeNodePtpDevices) Get(ctx context.Context, name string, options v1.GetOptions) (result *ptpv1.NodePtpDevice, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(nodeptpdevicesResource, c.ns, name), &ptpv1.NodePtpDevice{})

	if obj == nil {
		return nil, err
	}
	return obj.(*ptpv1.NodePtpDevice), err
}

// List takes label and field selectors, and returns the list of NodePtpDevices that match those selectors.
func (c *FakeNodePtpDevices) List(ctx context.Context, opts v1.ListOptions) (result *ptpv1.NodePtpDeviceList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(nodeptpdevicesResource, nodeptpdevicesKind, c.ns, opts), &ptpv1.NodePtpDeviceList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &ptpv1.NodePtpDeviceList{ListMeta: obj.(*ptpv1.NodePtpDeviceList).ListMeta}
	for _, item := range obj.(*ptpv1.NodePtpDeviceList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested nodePtpDevices.
func (c *FakeNodePtpDevices) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(nodeptpdevicesResource, c.ns, opts))

}

// Create takes the representation of a nodePtpDevice and creates it.  Returns the server's representation of the nodePtpDevice, and an error, if there is any.
func (c *FakeNodePtpDevices) Create(ctx context.Context, nodePtpDevice *ptpv1.NodePtpDevice, opts v1.CreateOptions) (result *ptpv1.NodePtpDevice, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(nodeptpdevicesResource, c.ns, nodePtpDevice), &ptpv1.NodePtpDevice{})

	if obj == nil {
		return nil, err
	}
	return obj.(*ptpv1.NodePtpDevice), err
}

// Update takes the representation of a nodePtpDevice and updates it. Returns the server's representation of the nodePtpDevice, and an error, if there is any.
func (c *FakeNodePtpDevices) Update(ctx context.Context, nodePtpDevice *ptpv1.NodePtpDevice, opts v1.UpdateOptions) (result *ptpv1.NodePtpDevice, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(nodeptpdevicesResource, c.ns, nodePtpDevice), &ptpv1.NodePtpDevice{})

	if obj == nil {
		return nil, err
	}
	return obj.(*ptpv1.NodePtpDevice), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeNodePtpDevices) UpdateStatus(ctx context.Context, nodePtpDevice *ptpv1.NodePtpDevice, opts v1.UpdateOptions) (*ptpv1.NodePtpDevice, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(nodeptpdevicesResource, "status", c.ns, nodePtpDevice), &ptpv1.NodePtpDevice{})

	if obj == nil {
		return nil, err
	}
	return obj.(*ptpv1.NodePtpDevice), err
}

// Delete takes name of the nodePtpDevice and deletes it. Returns an error if one occurs.
func (c *FakeNodePtpDevices) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(nodeptpdevicesResource, c.ns, name), &ptpv1.NodePtpDevice{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeNodePtpDevices) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(nodeptpdevicesResource, c.ns, listOpts)

	_, err := c.Fake.Invokes(action, &ptpv1.NodePtpDeviceList{})
	return err
}

// Patch applies the patch and returns the patched nodePtpDevice.
func (c *FakeNodePtpDevices) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *ptpv1.NodePtpDevice, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(nodeptpdevicesResource, c.ns, name, pt, data, subresources...), &ptpv1.NodePtpDevice{})

	if obj == nil {
		return nil, err
	}
	return obj.(*ptpv1.NodePtpDevice), err
}
