- name: Create temporary directory
  tempfile:
    state: directory
  register: temporary_directory

- name: Copy local kubeconfig to remote server if set
  block:
    - ansible.builtin.copy:
        src: "{{ provisioner_cluster_kubeconfig }}"
        dest: "{{ temporary_path }}/kubeconfig"
    - set_fact:
        kubeconfig_path: "{{ temporary_path }}/kubeconfig"
  when: provisioner_cluster_kubeconfig is defined and provisioner_cluster_kubeconfig|length > 0

- name: If not set, assume the defaults with kcli
  set_fact:
    kubeconfig_path: "/root/.kcli/clusters/{{ provisioner_cluster_name }}/auth/kubeconfig"
  when: provisioner_cluster_kubeconfig is not defined

- name: Copy template to temporary path
  template:
    src: "templates/{{ item }}"
    dest: "{{ temporary_directory.path }}/{{ item | replace('.j2', '') }}"
  vars:
    provisioner_cluster_registry_var: "{% if provisioner_cluster_registry is defined and provisioner_cluster_registry|length > 0 %}{{ provisioner_cluster_registry }}{% else %}{{ provisioner_cluster_name }}-disconnecter.{{ provisioner_cluster_name }}.{{ provisioner_cluster_domain }}:5000{% endif %}"
    disconnected_http_server_var: "{% if disconnected_http_server is defined and disconnected_http_server|length > 0 %}{{ disconnected_http_server }}{% else %}http://{{ provisioner_cluster_name }}-disconnecter.{{ provisioner_cluster_name }}.{{ provisioner_cluster_domain }}:80{% endif %}"
  with_items:
    - add-local-storage-operator.yaml.j2
    - local-volume.yaml.j2
    - add-hive-operator.yaml.j2
    - add-assisted-service-operator.yaml.j2

- name: Create local storage operator
  ansible.builtin.shell:
    cmd: oc apply -f ./add-local-storage-operator.yaml
    chdir: "{{ temporary_directory.path }}"
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"

- name: Apply local volume, need to iterate until succeeds
  ansible.builtin.shell:
    cmd: oc apply -f ./local-volume.yaml
    chdir: "{{ temporary_directory.path }}"
  register: result
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  until: result.rc == 0
  retries: 100
  delay: 30
  ignore_errors: yes

- name: wait until provisioner pods are created
  ansible.builtin.shell:
    cmd: oc get pods -n openshift-local-storage | grep provisioner | wc -l
  register: provisioner_pods
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  until: provisioner_pods.stdout|int == 3
  retries: 100
  delay: 30

- name: annotate as default class
  ansible.builtin.shell:
    cmd: "{{ lookup('template', 'patch_local_storage.j2') }}"
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"

- name: Create local storage operator
  ansible.builtin.shell:
    cmd: oc apply -f ./add-hive-operator.yaml
    chdir: "{{ temporary_directory.path }}"
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"

- name: wait until hive pods are created
  ansible.builtin.shell:
    cmd: oc get pods -n openshift-operators | grep hive | wc -l
  register: hive_pods
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  until: hive_pods.stdout|int == 1
  retries: 100
  delay: 30

- name: Create assisted service operator
  ansible.builtin.shell:
    cmd: oc apply -f ./add-assisted-service-operator.yaml
    chdir: "{{ temporary_directory.path }}"
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"

- name: wait until ai pods are created
  ansible.builtin.shell:
    cmd: oc get pods -n assisted-installer | grep assisted-service-operator | wc -l
  register: ai_pods
  environment:
    KUBECONFIG: "{{ kubeconfig_path }}"
  until: ai_pods.stdout|int == 1
  retries: 100
  delay: 30
