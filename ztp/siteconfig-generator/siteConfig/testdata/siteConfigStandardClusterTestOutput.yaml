---
apiVersion: v1
kind: Namespace
metadata:
    annotations:
        argocd.argoproj.io/sync-wave: "0"
    labels:
        name: cluster1
    name: cluster1
---
apiVersion: extensions.hive.openshift.io/v1beta1
kind: AgentClusterInstall
metadata:
    annotations:
        agent-install.openshift.io/install-config-overrides: '{"networking":{"networkType":"OVNKubernetes"}}'
        argocd.argoproj.io/sync-wave: "1"
    name: cluster1
    namespace: cluster1
spec:
    clusterDeploymentRef:
        name: cluster1
    imageSetRef:
        name: openshift-v4.9.0
    manifestsConfigMapRef:
        name: cluster1
    networking:
        clusterNetwork:
            - cidr: 10.128.0.0/14
              hostPrefix: 23
        machineNetwork:
            - cidr: 10.16.231.0/24
        serviceNetwork:
            - 172.30.0.0/16
    provisionRequirements:
        controlPlaneAgents: 3
    sshPublicKey: 'ssh-rsa '
---
apiVersion: hive.openshift.io/v1
kind: ClusterDeployment
metadata:
    annotations:
        argocd.argoproj.io/sync-wave: "1"
    name: cluster1
    namespace: cluster1
spec:
    baseDomain: example.com
    clusterInstallRef:
        group: extensions.hive.openshift.io
        kind: AgentClusterInstall
        name: cluster1
        version: v1beta1
    clusterName: cluster1
    platform:
        agentBareMetal:
            agentSelector:
                matchLabels:
                    cluster-name: cluster1
    pullSecretRef:
        name: pullSecretName
---
apiVersion: agent-install.openshift.io/v1beta1
kind: NMStateConfig
metadata:
    annotations:
        argocd.argoproj.io/sync-wave: "1"
    labels:
        nmstate-label: cluster1
    name: node1
    namespace: cluster1
spec:
    interfaces:
        - name: eno1
          macAddress: "00:00:00:01:20:30"
---
apiVersion: agent-install.openshift.io/v1beta1
kind: NMStateConfig
metadata:
    annotations:
        argocd.argoproj.io/sync-wave: "1"
    labels:
        nmstate-label: cluster1
    name: node2
    namespace: cluster1
spec:
    interfaces:
        - name: eno1
          macAddress: "00:00:00:01:20:40"
---
apiVersion: agent-install.openshift.io/v1beta1
kind: NMStateConfig
metadata:
    annotations:
        argocd.argoproj.io/sync-wave: "1"
    labels:
        nmstate-label: cluster1
    name: node3
    namespace: cluster1
spec:
    interfaces:
        - name: eno1
          macAddress: "00:00:00:01:20:50"
---
apiVersion: agent-install.openshift.io/v1beta1
kind: InfraEnv
metadata:
    annotations:
        argocd.argoproj.io/sync-wave: "1"
    name: cluster1
    namespace: cluster1
spec:
    clusterRef:
        name: cluster1
        namespace: cluster1
    nmStateConfigLabelSelector:
        matchLabels:
            nmstate-label: cluster1
    pullSecretRef:
        name: pullSecretName
    sshAuthorizedKey: 'ssh-rsa '
---
apiVersion: metal3.io/v1alpha1
kind: BareMetalHost
metadata:
    annotations:
        argocd.argoproj.io/sync-wave: "1"
        bmac.agent-install.openshift.io/hostname: node1
        bmac.agent-install.openshift.io/role: master
        inspect.metal3.io: disabled
    labels:
        infraenvs.agent-install.openshift.io: cluster1
    name: node1
    namespace: cluster1
spec:
    automatedCleaningMode: disabled
    bmc:
        disableCertificateVerification: true
    bootMode: UEFI
    online: true
---
apiVersion: metal3.io/v1alpha1
kind: BareMetalHost
metadata:
    annotations:
        argocd.argoproj.io/sync-wave: "1"
        bmac.agent-install.openshift.io/hostname: node2
        bmac.agent-install.openshift.io/role: master
        inspect.metal3.io: disabled
    labels:
        infraenvs.agent-install.openshift.io: cluster1
    name: node2
    namespace: cluster1
spec:
    automatedCleaningMode: disabled
    bmc:
        disableCertificateVerification: true
    bootMode: UEFI
    online: true
---
apiVersion: metal3.io/v1alpha1
kind: BareMetalHost
metadata:
    annotations:
        argocd.argoproj.io/sync-wave: "1"
        bmac.agent-install.openshift.io/hostname: node3
        bmac.agent-install.openshift.io/role: master
        inspect.metal3.io: disabled
    labels:
        infraenvs.agent-install.openshift.io: cluster1
    name: node3
    namespace: cluster1
spec:
    automatedCleaningMode: disabled
    bmc:
        disableCertificateVerification: true
    bootMode: UEFI
    online: true
---
apiVersion: v1
data:
    01-container-mount-ns-and-kubelet-conf-master.yaml: |
        # Automatically generated by extra-manifests-builder
        # Do not make changes directly.
        apiVersion: machineconfiguration.openshift.io/v1
        kind: MachineConfig
        metadata:
          labels:
            machineconfiguration.openshift.io/role: master
          name: container-mount-namespace-and-kubelet-conf-master
        spec:
          config:
            ignition:
              version: 3.2.0
            storage:
              files:
              - contents:
                  source: data:text/plain;charset=utf-8;base64,IyEvYmluL2Jhc2gKCmRlYnVnKCkgewogIGVjaG8gJEAgPiYyCn0KCnVzYWdlKCkgewogIGVjaG8gVXNhZ2U6ICQoYmFzZW5hbWUgJDApIFVOSVQgW2VudmZpbGUgW3Zhcm5hbWVdXQogIGVjaG8KICBlY2hvIEV4dHJhY3QgdGhlIGNvbnRlbnRzIG9mIHRoZSBmaXJzdCBFeGVjU3RhcnQgc3RhbnphIGZyb20gdGhlIGdpdmVuIHN5c3RlbWQgdW5pdCBhbmQgcmV0dXJuIGl0IHRvIHN0ZG91dAogIGVjaG8KICBlY2hvICJJZiAnZW52ZmlsZScgaXMgcHJvdmlkZWQsIHB1dCBpdCBpbiB0aGVyZSBpbnN0ZWFkLCBhcyBhbiBlbnZpcm9ubWVudCB2YXJpYWJsZSBuYW1lZCAndmFybmFtZSciCiAgZWNobyAiRGVmYXVsdCAndmFybmFtZScgaXMgRVhFQ1NUQVJUIGlmIG5vdCBzcGVjaWZpZWQiCiAgZXhpdCAxCn0KClVOSVQ9JDEKRU5WRklMRT0kMgpWQVJOQU1FPSQzCmlmIFtbIC16ICRVTklUIHx8ICRVTklUID09ICItLWhlbHAiIHx8ICRVTklUID09ICItaCIgXV07IHRoZW4KICB1c2FnZQpmaQpkZWJ1ZyAiRXh0cmFjdGluZyBFeGVjU3RhcnQgZnJvbSAkVU5JVCIKRklMRT0kKHN5c3RlbWN0bCBjYXQgJFVOSVQgfCBoZWFkIC1uIDEpCkZJTEU9JHtGSUxFI1wjIH0KaWYgW1sgISAtZiAkRklMRSBdXTsgdGhlbgogIGRlYnVnICJGYWlsZWQgdG8gZmluZCByb290IGZpbGUgZm9yIHVuaXQgJFVOSVQgKCRGSUxFKSIKICBleGl0CmZpCmRlYnVnICJTZXJ2aWNlIGRlZmluaXRpb24gaXMgaW4gJEZJTEUiCkVYRUNTVEFSVD0kKHNlZCAtbiAtZSAnL15FeGVjU3RhcnQ9LipcXCQvLC9bXlxcXSQvIHsgcy9eRXhlY1N0YXJ0PS8vOyBwIH0nIC1lICcvXkV4ZWNTdGFydD0uKlteXFxdJC8geyBzL15FeGVjU3RhcnQ9Ly87IHAgfScgJEZJTEUpCgppZiBbWyAkRU5WRklMRSBdXTsgdGhlbgogIFZBUk5BTUU9JHtWQVJOQU1FOi1FWEVDU1RBUlR9CiAgZWNobyAiJHtWQVJOQU1FfT0ke0VYRUNTVEFSVH0iID4gJEVOVkZJTEUKZWxzZQogIGVjaG8gJEVYRUNTVEFSVApmaQo=
                mode: 493
                path: /usr/local/bin/extractExecStart
              - contents:
                  source: data:text/plain;charset=utf-8;base64,IyEvYmluL2Jhc2gKbnNlbnRlciAtLW1vdW50PS9ydW4vY29udGFpbmVyLW1vdW50LW5hbWVzcGFjZS9tbnQgIiRAIgo=
                mode: 493
                path: /usr/local/bin/nsenterCmns
            systemd:
              units:
              - contents: |
                  [Unit]
                  Description=Manages a mount namespace that both kubelet and crio can use to share their container-specific mounts

                  [Service]
                  Type=oneshot
                  RemainAfterExit=yes
                  RuntimeDirectory=container-mount-namespace
                  Environment=RUNTIME_DIRECTORY=%t/container-mount-namespace
                  Environment=BIND_POINT=%t/container-mount-namespace/mnt
                  ExecStartPre=bash -c "findmnt ${RUNTIME_DIRECTORY} || mount --make-unbindable --bind ${RUNTIME_DIRECTORY} ${RUNTIME_DIRECTORY}"
                  ExecStartPre=touch ${BIND_POINT}
                  ExecStart=unshare --mount=${BIND_POINT} --propagation slave mount --make-rshared /
                  ExecStop=umount -R ${RUNTIME_DIRECTORY}
                enabled: true
                name: container-mount-namespace.service
              - dropins:
                - contents: |
                    [Unit]
                    Wants=container-mount-namespace.service
                    After=container-mount-namespace.service

                    [Service]
                    ExecStartPre=/usr/local/bin/extractExecStart %n /%t/%N-execstart.env ORIG_EXECSTART
                    EnvironmentFile=-/%t/%N-execstart.env
                    ExecStart=
                    ExecStart=bash -c "nsenter --mount=%t/container-mount-namespace/mnt \
                        ${ORIG_EXECSTART}"
                  name: 20-container-mount-namespace.conf
                name: crio.service
              - dropins:
                - contents: |
                    [Unit]
                    Wants=container-mount-namespace.service
                    After=container-mount-namespace.service

                    [Service]
                    ExecStartPre=/usr/local/bin/extractExecStart %n /%t/%N-execstart.env ORIG_EXECSTART
                    EnvironmentFile=-/%t/%N-execstart.env
                    ExecStart=
                    ExecStart=bash -c "nsenter --mount=%t/container-mount-namespace/mnt \
                        ${ORIG_EXECSTART} --housekeeping-interval=30s"
                  name: 20-container-mount-namespace.conf
                - contents: |
                    [Service]
                    Environment="OPENSHIFT_MAX_HOUSEKEEPING_INTERVAL_DURATION=60s"
                    Environment="OPENSHIFT_EVICTION_MONITORING_PERIOD_DURATION=30s"
                  name: 30-kubelet-interval-tuning.conf
                name: kubelet.service
    01-container-mount-ns-and-kubelet-conf-worker.yaml: |
        # Automatically generated by extra-manifests-builder
        # Do not make changes directly.
        apiVersion: machineconfiguration.openshift.io/v1
        kind: MachineConfig
        metadata:
          labels:
            machineconfiguration.openshift.io/role: worker
          name: container-mount-namespace-and-kubelet-conf-worker
        spec:
          config:
            ignition:
              version: 3.2.0
            storage:
              files:
              - contents:
                  source: data:text/plain;charset=utf-8;base64,IyEvYmluL2Jhc2gKCmRlYnVnKCkgewogIGVjaG8gJEAgPiYyCn0KCnVzYWdlKCkgewogIGVjaG8gVXNhZ2U6ICQoYmFzZW5hbWUgJDApIFVOSVQgW2VudmZpbGUgW3Zhcm5hbWVdXQogIGVjaG8KICBlY2hvIEV4dHJhY3QgdGhlIGNvbnRlbnRzIG9mIHRoZSBmaXJzdCBFeGVjU3RhcnQgc3RhbnphIGZyb20gdGhlIGdpdmVuIHN5c3RlbWQgdW5pdCBhbmQgcmV0dXJuIGl0IHRvIHN0ZG91dAogIGVjaG8KICBlY2hvICJJZiAnZW52ZmlsZScgaXMgcHJvdmlkZWQsIHB1dCBpdCBpbiB0aGVyZSBpbnN0ZWFkLCBhcyBhbiBlbnZpcm9ubWVudCB2YXJpYWJsZSBuYW1lZCAndmFybmFtZSciCiAgZWNobyAiRGVmYXVsdCAndmFybmFtZScgaXMgRVhFQ1NUQVJUIGlmIG5vdCBzcGVjaWZpZWQiCiAgZXhpdCAxCn0KClVOSVQ9JDEKRU5WRklMRT0kMgpWQVJOQU1FPSQzCmlmIFtbIC16ICRVTklUIHx8ICRVTklUID09ICItLWhlbHAiIHx8ICRVTklUID09ICItaCIgXV07IHRoZW4KICB1c2FnZQpmaQpkZWJ1ZyAiRXh0cmFjdGluZyBFeGVjU3RhcnQgZnJvbSAkVU5JVCIKRklMRT0kKHN5c3RlbWN0bCBjYXQgJFVOSVQgfCBoZWFkIC1uIDEpCkZJTEU9JHtGSUxFI1wjIH0KaWYgW1sgISAtZiAkRklMRSBdXTsgdGhlbgogIGRlYnVnICJGYWlsZWQgdG8gZmluZCByb290IGZpbGUgZm9yIHVuaXQgJFVOSVQgKCRGSUxFKSIKICBleGl0CmZpCmRlYnVnICJTZXJ2aWNlIGRlZmluaXRpb24gaXMgaW4gJEZJTEUiCkVYRUNTVEFSVD0kKHNlZCAtbiAtZSAnL15FeGVjU3RhcnQ9LipcXCQvLC9bXlxcXSQvIHsgcy9eRXhlY1N0YXJ0PS8vOyBwIH0nIC1lICcvXkV4ZWNTdGFydD0uKlteXFxdJC8geyBzL15FeGVjU3RhcnQ9Ly87IHAgfScgJEZJTEUpCgppZiBbWyAkRU5WRklMRSBdXTsgdGhlbgogIFZBUk5BTUU9JHtWQVJOQU1FOi1FWEVDU1RBUlR9CiAgZWNobyAiJHtWQVJOQU1FfT0ke0VYRUNTVEFSVH0iID4gJEVOVkZJTEUKZWxzZQogIGVjaG8gJEVYRUNTVEFSVApmaQo=
                mode: 493
                path: /usr/local/bin/extractExecStart
              - contents:
                  source: data:text/plain;charset=utf-8;base64,IyEvYmluL2Jhc2gKbnNlbnRlciAtLW1vdW50PS9ydW4vY29udGFpbmVyLW1vdW50LW5hbWVzcGFjZS9tbnQgIiRAIgo=
                mode: 493
                path: /usr/local/bin/nsenterCmns
            systemd:
              units:
              - contents: |
                  [Unit]
                  Description=Manages a mount namespace that both kubelet and crio can use to share their container-specific mounts

                  [Service]
                  Type=oneshot
                  RemainAfterExit=yes
                  RuntimeDirectory=container-mount-namespace
                  Environment=RUNTIME_DIRECTORY=%t/container-mount-namespace
                  Environment=BIND_POINT=%t/container-mount-namespace/mnt
                  ExecStartPre=bash -c "findmnt ${RUNTIME_DIRECTORY} || mount --make-unbindable --bind ${RUNTIME_DIRECTORY} ${RUNTIME_DIRECTORY}"
                  ExecStartPre=touch ${BIND_POINT}
                  ExecStart=unshare --mount=${BIND_POINT} --propagation slave mount --make-rshared /
                  ExecStop=umount -R ${RUNTIME_DIRECTORY}
                enabled: true
                name: container-mount-namespace.service
              - dropins:
                - contents: |
                    [Unit]
                    Wants=container-mount-namespace.service
                    After=container-mount-namespace.service

                    [Service]
                    ExecStartPre=/usr/local/bin/extractExecStart %n /%t/%N-execstart.env ORIG_EXECSTART
                    EnvironmentFile=-/%t/%N-execstart.env
                    ExecStart=
                    ExecStart=bash -c "nsenter --mount=%t/container-mount-namespace/mnt \
                        ${ORIG_EXECSTART}"
                  name: 20-container-mount-namespace.conf
                name: crio.service
              - dropins:
                - contents: |
                    [Unit]
                    Wants=container-mount-namespace.service
                    After=container-mount-namespace.service

                    [Service]
                    ExecStartPre=/usr/local/bin/extractExecStart %n /%t/%N-execstart.env ORIG_EXECSTART
                    EnvironmentFile=-/%t/%N-execstart.env
                    ExecStart=
                    ExecStart=bash -c "nsenter --mount=%t/container-mount-namespace/mnt \
                        ${ORIG_EXECSTART} --housekeeping-interval=30s"
                  name: 20-container-mount-namespace.conf
                - contents: |
                    [Service]
                    Environment="OPENSHIFT_MAX_HOUSEKEEPING_INTERVAL_DURATION=60s"
                    Environment="OPENSHIFT_EVICTION_MONITORING_PERIOD_DURATION=30s"
                  name: 30-kubelet-interval-tuning.conf
                name: kubelet.service
    03-sctp-machine-config-master.yaml: |
        # Automatically generated by extra-manifests-builder
        # Do not make changes directly.
        apiVersion: machineconfiguration.openshift.io/v1
        kind: MachineConfig
        metadata:
          labels:
            machineconfiguration.openshift.io/role: master
          name: load-sctp-module-master
        spec:
          config:
            ignition:
              version: 2.2.0
            storage:
              files:
                - contents:
                    source: data:,
                    verification: {}
                  filesystem: root
                  mode: 420
                  path: /etc/modprobe.d/sctp-blacklist.conf
                - contents:
                    source: data:text/plain;charset=utf-8,sctp
                  filesystem: root
                  mode: 420
                  path: /etc/modules-load.d/sctp-load.conf
    03-sctp-machine-config-worker.yaml: |
        # Automatically generated by extra-manifests-builder
        # Do not make changes directly.
        apiVersion: machineconfiguration.openshift.io/v1
        kind: MachineConfig
        metadata:
          labels:
            machineconfiguration.openshift.io/role: worker
          name: load-sctp-module-worker
        spec:
          config:
            ignition:
              version: 2.2.0
            storage:
              files:
                - contents:
                    source: data:,
                    verification: {}
                  filesystem: root
                  mode: 420
                  path: /etc/modprobe.d/sctp-blacklist.conf
                - contents:
                    source: data:text/plain;charset=utf-8,sctp
                  filesystem: root
                  mode: 420
                  path: /etc/modules-load.d/sctp-load.conf
    04-accelerated-container-startup-master.yaml: |
        # Automatically generated by extra-manifests-builder
        # Do not make changes directly.
        apiVersion: machineconfiguration.openshift.io/v1
        kind: MachineConfig
        metadata:
          labels:
            machineconfiguration.openshift.io/role: master
          name: 04-accelerated-container-startup-master
        spec:
          config:
            ignition:
              version: 3.2.0
            storage:
              files:
              - contents:
                  source: data:text/plain;charset=utf-8;base64,
                mode: 493
                path: /usr/local/bin/accelerated-container-startup.sh
            systemd:
              units:
              - contents: |
                  [Unit]
                  Description=Unlocks more CPUs for critical system processes during container startup

                  [Service]
                  Type=simple
                  ExecStart=/usr/local/bin/accelerated-container-startup.sh

                  # Maximum wait time is 600s = 10m:
                  Environment=MAXIMUM_WAIT_TIME=600

                  # Steady-state threshold = 2%
                  # Allowed values:
                  #  4  - absolute pod count (+/-)
                  #  4% - percent change (+/-)
                  #  -1 - disable the steady-state check
                  # Note: '%' must be escaped as '%%' in systemd unit files
                  Environment=STEADY_STATE_THRESHOLD=2%%

                  # Steady-state window = 120s
                  # If the running pod count stays within the given threshold for this time
                  # period, return CPU utilization to normal before the maximum wait time has
                  # expires
                  Environment=STEADY_STATE_WINDOW=120

                  # Steady-state minimum = 40
                  # Increasing this will skip any steady-state checks until the count rises above
                  # this number to avoid false positives if there are some periods where the
                  # count doesn't increase but we know we can't be at steady-state yet.
                  Environment=STEADY_STATE_MINIMUM=40

                  [Install]
                  WantedBy=multi-user.target
                enabled: true
                name: accelerated-container-startup.service
              - contents: |
                  [Unit]
                  Description=Unlocks more CPUs for critical system processes during container shutdown
                  DefaultDependencies=no

                  [Service]
                  Type=simple
                  ExecStart=/usr/local/bin/accelerated-container-startup.sh

                  # Maximum wait time is 600s = 10m:
                  Environment=MAXIMUM_WAIT_TIME=600

                  # Steady-state threshold
                  # Allowed values:
                  #  4  - absolute pod count (+/-)
                  #  4% - percent change (+/-)
                  #  -1 - disable the steady-state check
                  # Note: '%' must be escaped as '%%' in systemd unit files
                  Environment=STEADY_STATE_THRESHOLD=-1

                  # Steady-state window = 60s
                  # If the running pod count stays within the given threshold for this time
                  # period, return CPU utilization to normal before the maximum wait time has
                  # expires
                  Environment=STEADY_STATE_WINDOW=60

                  [Install]
                  WantedBy=shutdown.target reboot.target halt.target
                enabled: true
                name: accelerated-container-shutdown.service
    04-accelerated-container-startup-worker.yaml: |
        # Automatically generated by extra-manifests-builder
        # Do not make changes directly.
        apiVersion: machineconfiguration.openshift.io/v1
        kind: MachineConfig
        metadata:
          labels:
            machineconfiguration.openshift.io/role: worker
          name: 04-accelerated-container-startup-worker
        spec:
          config:
            ignition:
              version: 3.2.0
            storage:
              files:
              - contents:
                  source: data:text/plain;charset=utf-8;base64,
                mode: 493
                path: /usr/local/bin/accelerated-container-startup.sh
            systemd:
              units:
              - contents: |
                  [Unit]
                  Description=Unlocks more CPUs for critical system processes during container startup

                  [Service]
                  Type=simple
                  ExecStart=/usr/local/bin/accelerated-container-startup.sh

                  # Maximum wait time is 600s = 10m:
                  Environment=MAXIMUM_WAIT_TIME=600

                  # Steady-state threshold = 2%
                  # Allowed values:
                  #  4  - absolute pod count (+/-)
                  #  4% - percent change (+/-)
                  #  -1 - disable the steady-state check
                  # Note: '%' must be escaped as '%%' in systemd unit files
                  Environment=STEADY_STATE_THRESHOLD=2%%

                  # Steady-state window = 120s
                  # If the running pod count stays within the given threshold for this time
                  # period, return CPU utilization to normal before the maximum wait time has
                  # expires
                  Environment=STEADY_STATE_WINDOW=120

                  # Steady-state minimum = 40
                  # Increasing this will skip any steady-state checks until the count rises above
                  # this number to avoid false positives if there are some periods where the
                  # count doesn't increase but we know we can't be at steady-state yet.
                  Environment=STEADY_STATE_MINIMUM=40

                  [Install]
                  WantedBy=multi-user.target
                enabled: true
                name: accelerated-container-startup.service
              - contents: |
                  [Unit]
                  Description=Unlocks more CPUs for critical system processes during container shutdown
                  DefaultDependencies=no

                  [Service]
                  Type=simple
                  ExecStart=/usr/local/bin/accelerated-container-startup.sh

                  # Maximum wait time is 600s = 10m:
                  Environment=MAXIMUM_WAIT_TIME=600

                  # Steady-state threshold
                  # Allowed values:
                  #  4  - absolute pod count (+/-)
                  #  4% - percent change (+/-)
                  #  -1 - disable the steady-state check
                  # Note: '%' must be escaped as '%%' in systemd unit files
                  Environment=STEADY_STATE_THRESHOLD=-1

                  # Steady-state window = 60s
                  # If the running pod count stays within the given threshold for this time
                  # period, return CPU utilization to normal before the maximum wait time has
                  # expires
                  Environment=STEADY_STATE_WINDOW=60

                  [Install]
                  WantedBy=shutdown.target reboot.target halt.target
                enabled: true
                name: accelerated-container-shutdown.service
    05-chrony-dynamic-master.yaml: |
        # Automatically generated by extra-manifests-builder
        # Do not make changes directly.
        apiVersion: machineconfiguration.openshift.io/v1
        kind: MachineConfig
        metadata:
          labels:
            machineconfiguration.openshift.io/role: master
          name: 05-chronyd-dynamic-master
        spec:
          config:
            ignition:
              version: 3.2.0
            storage:
              files:
              - contents:
                  source: data:text/plain;charset=utf-8;base64,IyEvYmluL2Jhc2gKIyBFdmFsdWF0ZSBQVFAgc3luY2hyb25pemF0aW9uIHN0YXRlIGFuZCBjcmVhdGUgb3IgZGVsZXRlIAojIHRoZSBjaHJvbnlkLnNlcnZpY2UgY29uZGl0aW9uIGZpbGUgYWNjb3JkaW5nbHkKCiMgVGhlIHBhcmFtZXRlcyBiZWxvdyBhcmUgdHVuZWQgdXNpbmcgY2hyb255ZC1yZXN0YXJ0LnNlcnZpY2UgZHJvcC1pbgojIE1heGltdW0gUFRQIG9mZnNldCB0byBiZSBjb25zaWRlcmVkIGluLXN5bmMgKG5zKQpNQVhfT0ZGU0VUPSR7TUFYX09GRlNFVDotMTAwMDAwfQojIFBUUCBvZmZzZXQgaHlzdGVyZXNpcyB0aHJlc2hvbGQgKG5zKQpPRkZTRVRfVEhSRVNIT0xEPSR7T0ZGU0VUX1RIUkVTSE9MRDotMjAwMDB9CiMgTWF4aW11bSB2YWxpZCBtZWFzdXJlbWVudCBhZ2UgKHMpClNZTkNfQUdFPSR7U1lOQ19BR0U6LTYwMH0KCiMgRmlsZSBmb3Igc3RhcnRpbmcgY2hyb255ZCBjb25kaXRpb25hbGx5ClNZTkNfTUFSS0VSX1BBVEg9Ii92YXIvcnVuL3B0cC9pbnN5bmMiCgojIEF1eGlsaWFyeSBsb2dnaW5nIGZ1bmN0aW9uCmZ1bmN0aW9uIGxvZ19kZWJ1ZygpewogIGxvY2FsIExPR0dFUl9UQUc9InB0cC1jaHJvbnlkIgogIGxvZ2dlciAtdCAkTE9HR0VSX1RBRyAtcCAic3lzbG9nLmRlYnVnIiAiJDEiCn0KCiMgQ29tcGFyZSBmbG9hdGluZyBwb2ludCBudW1iZXJzCmZ1bmN0aW9uIGdyZWF0ZXIoKSB7CiAgIGF3ayAtdiBuMT0iJDEiIC12IG4yPSIkMiIgJ0JFR0lOIHtwcmludGYgKG4xPm4yPyJ0cnVlIjoiZmFsc2UiKSJcbiIsIG4xLCBuMn0nCn0KCiMgUmV0dXJuIGFic29sdXRlIChmb3IgbWFzdGVyIG9mZnNldCkKZnVuY3Rpb24gYWJzKCkgeyAKICAgIGVjaG8gJHsxIyMtfQp9CgojIENoZWNrIHZhcmlhYmxlIGlzIGRlZmluZWQKZnVuY3Rpb24gdmFyX2RlZmluZWQoKSB7CiAgVkFSPSIkMSIKICBpZiBbWyAkeyNWQVJ9IC1lcSAwIF1dOyB0aGVuIAogICAgbG9nX2RlYnVnICJTYW5pdHkgY2hlY2sgcmVzdWx0IGF0IGxpbmUgJChjYWxsZXIpOiBQVFAgbWlnaHQgbm90IGJlIHJ1bm5pbmciICAgIAogICAgcmV0dXJuIDEKICBmaQogIHJldHVybiAwCn0KCiMgR2V0IHRoZSBsYXN0IGxpbmUgY29udGFpbmluZyBtYXN0ZXJvZmZzZXQgZnJvbSB0aGUgbGF0ZXN0IGF2YWlsYWJsZSBsb2cKIyBBUkdVTUVOVFM6CiMgICBub25lCiMgR0xPQkFMOgojICAgbm9uZQojIE9VVFBVVDoKIyAgIExhc3QgbGluZSBvZiB0aGUgbG9nIGNvbnRhaW5pbmcgb2Zmc2V0IGFuZCB0aW1lc3RhbXAKIyAgICAgU29tZXRoaW5nIGxpa2UgIjIwMjEtMTAtMThUMTY6NDc6MDYuMDIyOTgzNjY1KzAwOjAwIHN0ZG91dCBGIHB0cDRsWzgxODAuMTUwXTogW2VuczRmMF0gCiMgICAgIG1hc3RlciBvZmZzZXQgMyBzMiBmcmVxIC0xNjc1NjE2OSBwYXRoIGRlbGF5IDE0ODEiCiMgUkVUVVJOOgojICAgMCBpZiBhbGwgc2FuaXR5IGNoZWNrcyBwYXNzZWQsIDEgb3RoZXJ3aXNlCmdldF9sYXN0X3B0cF9zdGF0dXMoKSB7CiAgbG9jYWwgQ09OVEFJTkVSX0lEPSQoY3JpY3RsIHBzIC0tbmFtZSBsaW51eHB0cC1kYWVtb24tY29udGFpbmVyIC0tbGF0ZXN0IC0tc3RhdGUgUnVubmluZyAtLXF1aWV0KQogIGlmICEgdmFyX2RlZmluZWQgJENPTlRBSU5FUl9JRDsgdGhlbgogICAgcmV0dXJuIDEKICBmaQogIGxvY2FsIExPR19OQU1FPSQoY3JpY3RsIGluc3BlY3QgLW8ganNvbiAkQ09OVEFJTkVSX0lEIHxqcSAnLnN0YXR1cy5sb2dQYXRoJykKICBpZiAhIHZhcl9kZWZpbmVkICRMT0dfTkFNRTsgdGhlbgogICAgcmV0dXJuIDEKICBmaQogIExPR19OQU1FPSR7TE9HX05BTUUvL1wiL30KICBsb2NhbCBMQVNUX1NUQVRVUz0kKHRhaWwgLTIwMDAgJExPR19OQU1FIHxncmVwICJdIG1hc3RlciBvZmZzZXQiIHx0YWlsIC0xKQogIGlmICEgdmFyX2RlZmluZWQgJExBU1RfU1RBVFVTOyB0aGVuCiAgICByZXR1cm4gMQogIGZpCiAgZWNobyAiJHtMQVNUX1NUQVRVU30iCiAgbG9nX2RlYnVnICIke0xBU1RfU1RBVFVTfSIKICByZXR1cm4gMAp9CgojIEdldCB0aGUgdGltZSBvZmZzZXQgYW5kIGFzc29jaWF0ZWQgdGltZXN0YW1wIGZyb20gcHRwNGwgbG9nIGxpbmUKIyBBUkdVTUVOVFM6CiMgICBub25lCiMgR0xPQkFMOgojICAgU1lOQ19BR0UgLSBNYXhpbXVtIGFsbG93ZWQgYWdlIGluIHNlY29uZHMgb2YgYSBsb2cgbGluZSB0byBiZSBjb25zaWRlcmVkIHZhbGlkCiMgICAgIGZvciBzeW5jIGV2YWx1YXRpb24KIyBPVVRQVVQ6CiMgICBBQlNfT0ZGU0VUX1ZBTFVFIC0gaW4gbnMKIyBSRVRVUk46CiMgICAwIGlmIHRpbWUgb2Zmc2V0IGlzIHZhbGlkLCAxIGlmIG5vdApnZXRfcHRwX29mZnNldCgpIHsKICBsb2NhbCBMQVNUX1NUQVRVUwogIExBU1RfU1RBVFVTPSQoZ2V0X2xhc3RfcHRwX3N0YXR1cykKICAKICBpZiBbWyAkPyAtbmUgMCBdXTsgdGhlbgogICAgbG9nX2RlYnVnICJObyB2YWxpZCBsaW51eHB0cCBzdGF0dXMuIgogICAgcmV0dXJuIDEKICBmaQogIGxvY2FsIFNUUklOR19BUlJBWT0oJExBU1RfU1RBVFVTKQogIGxvY2FsIE9GRlNFVF9EQVRFPSR7U1RSSU5HX0FSUkFZWzBdfQogIGRlY2xhcmUgLWkgT0ZGU0VUX1ZBTFVFCiAgT0ZGU0VUX1ZBTFVFPSR7U1RSSU5HX0FSUkFZWzddfQogIGRlY2xhcmUgLWkgQUJTX09GRlNFVF9WQUxVRQogIGxvY2FsIEFCU19PRkZTRVRfVkFMVUU9JChhYnMgJE9GRlNFVF9WQUxVRSkKICBsb2dfZGVidWcgIlBUUCBvZmZzZXQ6ICRPRkZTRVRfVkFMVUUsIGFicyBvZmZzZXQgJEFCU19PRkZTRVRfVkFMVUUsdGltZXN0YW1wICRPRkZTRVRfREFURSIKCiAgIyBDaGVjayBob3cgZnJlc2ggaXMgdGhlIG9mZnNldCBtZWFzdXJlbWVudCB0byBwcm90ZWN0CiAgIyBmcm9tIGxvb2tpbmcgYXQgdGhlIG9sZCBsb2cgdGhhdCBoYXMgbm90IGJlZW4gY2xlYW5lZCBmcm9tIHRoZSBzeXN0ZW0KICBsb2NhbCBDVVJSRU5UX1RJTUU9IiQoZGF0ZSArJXMuJU4pIiAjIGN1cnJlbnQgZGF0ZSBpbiBuYW5vc2Vjb25kcwogIGxvY2FsIE9GRlNFVF9USU1FU1RBTVA9IiQoZGF0ZSArJXMuJU4gLWQgIiRPRkZTRVRfREFURSIpIiAjIG1lYXN1cmVtZW50IGRhdGUgaW4gbnMKICBsb2NhbCBUSU1FX0RJRkY9JChhd2sgJ3twcmludCAkMS0kMn0nIDw8PCIke0NVUlJFTlRfVElNRX0gJHtPRkZTRVRfVElNRVNUQU1QfSIpCiAgZWNobyAiJHtBQlNfT0ZGU0VUX1ZBTFVFfSIKICBpZiAkKGdyZWF0ZXIgJFRJTUVfRElGRiAkU1lOQ19BR0UpOyB0aGVuCiAgICByZXR1cm4gMQogIGVsc2UKICAgIHJldHVybiAwCiAgZmkKfQoKIyBDaGVjayBpZiBQVFAgaXMgc3luY2VkCiMgQVJHVU1FTlRTOgojICAgbm9uZQojIEdMT0JBTDoKIyAgIFNZTkNfTUFSS0VSX1BBVEggLSBGaWxlIGZvciBzdGFydGluZyBjaHJvbnlkIGNvbmRpdGlvbmFsbHkuIFVzZWQgdG8gZmluZCB0aGUgCiMgICAgICBsYXN0IGtub3duIHB0cCBzeW5jIHN0YXRlIGFuZCBhcHBseSBoeXN0ZXJlc2lzIHRocmVzaG9sZAojICAgTUFYX09GRlNFVCAtIE1heGltdW0gYWxsb3dlZCBjbG9jayBvZmZzZXQgaW4gbmFub3NlY29uZHMKIyAgIE9GRlNFVF9USFJFU0hPTEQgLSBoeXN0ZXJlc2lzIHRocmVzaG9sZAojICAgQUJTX09GRlNFVF9WQUxVRSAtIFBUUCBjbG9jayBvZmZzZXQKIyBPVVRQVVQ6CiMgICBub25lCiMgUkVUVVJOOgojICAgMCBpZiB0aGUgb2Zmc2V0IGlzIHdpdGhpbiB0aGUgYm91bmRhcmllcywgMSBpZiBub3QKcHRwX3N5bmNlZCgpIHsKICBkZWNsYXJlIC1pIE9GRlNFVAogIE9GRlNFVD0kKGdldF9wdHBfb2Zmc2V0KQogIGlmIFtbICQ/IC1uZSAwIF1dOyB0aGVuCiAgICBsb2dfZGVidWcgIk5vIHZhbGlkIHB0cCBvZmZzZXQuIgogICAgcmV0dXJuIDEKICBmaQogIGlmIFtbIC1mICIkU1lOQ19NQVJLRVJfUEFUSCIgXV07IHRoZW4KICAgIGxvZ19kZWJ1ZyAiTGFzdCBrbm93biBwdHAgc3RhdGUgLSBzeW5jaHJvbml6ZWQiCiAgICAoKE1BWF9PRkZTRVQ9TUFYX09GRlNFVCtPRkZTRVRfVEhSRVNIT0xEKSkKICBlbHNlCiAgICBsb2dfZGVidWcgIkxhc3Qga25vd24gcHRwIHN0YXRlIC0gdW5zeW5jaHJvbml6ZWQiCiAgICAoKE1BWF9PRkZTRVQ9TUFYX09GRlNFVC1PRkZTRVRfVEhSRVNIT0xEKSkKICBmaQogIGlmIFsgJE9GRlNFVCAtZ3QgJE1BWF9PRkZTRVQgXTsgdGhlbgogICAgcmV0dXJuIDEKICBmaQogIHJldHVybiAwCn0KCgojIElmIHB0cCBpcyBzeW5jZWQgYW5kIHRoZSBvZmZzZXQgaXMgdmFsaWQsIGNyZWF0ZSBjaHJvbnlkIG1hcmtlcgojIE90aGVyd2lzZSBkZWxldGUgdGhlIG1hcmtlcgptYWluKCkgewogIGlmIHB0cF9zeW5jZWQ7IHRoZW4KICAgIGxvZ19kZWJ1ZyAiZW5zdXJlICRTWU5DX01BUktFUl9QQVRIIGV4aXN0cyIKICAgIHRvdWNoICRTWU5DX01BUktFUl9QQVRICiAgZWxzZQogICAgbG9nX2RlYnVnICJlbnN1cmUgJFNZTkNfTUFSS0VSX1BBVEggZG9lcyBub3QgZXhpc3QiCiAgICBybSAkU1lOQ19NQVJLRVJfUEFUSCAmPiAvZGV2L251bAogIGZpCn0KCmlmIFtbICIke0JBU0hfU09VUkNFWzBdfSIgPSAiJHswfSIgXV07IHRoZW4KICBtYWluICIke0B9IgogIGV4aXQgJD8KZmkK
                mode: 493
                path: /usr/local/bin/ptp-sync-check
              - contents:
                  source: data:text/plain;charset=utf-8;base64,IyEvYmluL2Jhc2gKIyBSdW4gUFRQIHN0YXRlIGV2YWx1YXRpb24gc2NyaXB0IGFuZCByZXN0YXJ0IHRoZSBjaHJvbnlkLnNlcnZpY2UKL3Vzci9sb2NhbC9iaW4vcHRwLXN5bmMtY2hlY2sKL2Jpbi9zeXN0ZW1jdGwgcmVzdGFydCBjaHJvbnlkLnNlcnZpY2U=
                mode: 493
                path: /usr/local/bin/restart-chronyd
            systemd:
              units:
              - contents: |
                  [Unit]
                  Description=Restart chronyd

                  [Service]
                  Type=oneshot
                  Environment=MAX_OFFSET=100000
                  Environment=OFFSET_THRESHOLD=20000
                  Environment=SYNC_AGE=600
                  ExecStart=/usr/local/bin/restart-chronyd
                name: chronyd-restart.service
              - contents: |
                  [Unit]
                  Description=Restart chronyd periodically

                  [Timer]
                  OnCalendar=*:0/5

                  [Install]
                  WantedBy=timers.target
                enabled: true
                name: chronyd-restart.timer
              - dropins:
                - contents: |-
                    [Unit]
                    ConditionPathExists=!/var/run/ptp/insync
                  name: 20-conditional-start.conf
                name: chronyd.service
    05-chrony-dynamic-worker.yaml: |
        # Automatically generated by extra-manifests-builder
        # Do not make changes directly.
        apiVersion: machineconfiguration.openshift.io/v1
        kind: MachineConfig
        metadata:
          labels:
            machineconfiguration.openshift.io/role: worker
          name: 05-chronyd-dynamic-worker
        spec:
          config:
            ignition:
              version: 3.2.0
            storage:
              files:
              - contents:
                  source: data:text/plain;charset=utf-8;base64,IyEvYmluL2Jhc2gKIyBFdmFsdWF0ZSBQVFAgc3luY2hyb25pemF0aW9uIHN0YXRlIGFuZCBjcmVhdGUgb3IgZGVsZXRlIAojIHRoZSBjaHJvbnlkLnNlcnZpY2UgY29uZGl0aW9uIGZpbGUgYWNjb3JkaW5nbHkKCiMgVGhlIHBhcmFtZXRlcyBiZWxvdyBhcmUgdHVuZWQgdXNpbmcgY2hyb255ZC1yZXN0YXJ0LnNlcnZpY2UgZHJvcC1pbgojIE1heGltdW0gUFRQIG9mZnNldCB0byBiZSBjb25zaWRlcmVkIGluLXN5bmMgKG5zKQpNQVhfT0ZGU0VUPSR7TUFYX09GRlNFVDotMTAwMDAwfQojIFBUUCBvZmZzZXQgaHlzdGVyZXNpcyB0aHJlc2hvbGQgKG5zKQpPRkZTRVRfVEhSRVNIT0xEPSR7T0ZGU0VUX1RIUkVTSE9MRDotMjAwMDB9CiMgTWF4aW11bSB2YWxpZCBtZWFzdXJlbWVudCBhZ2UgKHMpClNZTkNfQUdFPSR7U1lOQ19BR0U6LTYwMH0KCiMgRmlsZSBmb3Igc3RhcnRpbmcgY2hyb255ZCBjb25kaXRpb25hbGx5ClNZTkNfTUFSS0VSX1BBVEg9Ii92YXIvcnVuL3B0cC9pbnN5bmMiCgojIEF1eGlsaWFyeSBsb2dnaW5nIGZ1bmN0aW9uCmZ1bmN0aW9uIGxvZ19kZWJ1ZygpewogIGxvY2FsIExPR0dFUl9UQUc9InB0cC1jaHJvbnlkIgogIGxvZ2dlciAtdCAkTE9HR0VSX1RBRyAtcCAic3lzbG9nLmRlYnVnIiAiJDEiCn0KCiMgQ29tcGFyZSBmbG9hdGluZyBwb2ludCBudW1iZXJzCmZ1bmN0aW9uIGdyZWF0ZXIoKSB7CiAgIGF3ayAtdiBuMT0iJDEiIC12IG4yPSIkMiIgJ0JFR0lOIHtwcmludGYgKG4xPm4yPyJ0cnVlIjoiZmFsc2UiKSJcbiIsIG4xLCBuMn0nCn0KCiMgUmV0dXJuIGFic29sdXRlIChmb3IgbWFzdGVyIG9mZnNldCkKZnVuY3Rpb24gYWJzKCkgeyAKICAgIGVjaG8gJHsxIyMtfQp9CgojIENoZWNrIHZhcmlhYmxlIGlzIGRlZmluZWQKZnVuY3Rpb24gdmFyX2RlZmluZWQoKSB7CiAgVkFSPSIkMSIKICBpZiBbWyAkeyNWQVJ9IC1lcSAwIF1dOyB0aGVuIAogICAgbG9nX2RlYnVnICJTYW5pdHkgY2hlY2sgcmVzdWx0IGF0IGxpbmUgJChjYWxsZXIpOiBQVFAgbWlnaHQgbm90IGJlIHJ1bm5pbmciICAgIAogICAgcmV0dXJuIDEKICBmaQogIHJldHVybiAwCn0KCiMgR2V0IHRoZSBsYXN0IGxpbmUgY29udGFpbmluZyBtYXN0ZXJvZmZzZXQgZnJvbSB0aGUgbGF0ZXN0IGF2YWlsYWJsZSBsb2cKIyBBUkdVTUVOVFM6CiMgICBub25lCiMgR0xPQkFMOgojICAgbm9uZQojIE9VVFBVVDoKIyAgIExhc3QgbGluZSBvZiB0aGUgbG9nIGNvbnRhaW5pbmcgb2Zmc2V0IGFuZCB0aW1lc3RhbXAKIyAgICAgU29tZXRoaW5nIGxpa2UgIjIwMjEtMTAtMThUMTY6NDc6MDYuMDIyOTgzNjY1KzAwOjAwIHN0ZG91dCBGIHB0cDRsWzgxODAuMTUwXTogW2VuczRmMF0gCiMgICAgIG1hc3RlciBvZmZzZXQgMyBzMiBmcmVxIC0xNjc1NjE2OSBwYXRoIGRlbGF5IDE0ODEiCiMgUkVUVVJOOgojICAgMCBpZiBhbGwgc2FuaXR5IGNoZWNrcyBwYXNzZWQsIDEgb3RoZXJ3aXNlCmdldF9sYXN0X3B0cF9zdGF0dXMoKSB7CiAgbG9jYWwgQ09OVEFJTkVSX0lEPSQoY3JpY3RsIHBzIC0tbmFtZSBsaW51eHB0cC1kYWVtb24tY29udGFpbmVyIC0tbGF0ZXN0IC0tc3RhdGUgUnVubmluZyAtLXF1aWV0KQogIGlmICEgdmFyX2RlZmluZWQgJENPTlRBSU5FUl9JRDsgdGhlbgogICAgcmV0dXJuIDEKICBmaQogIGxvY2FsIExPR19OQU1FPSQoY3JpY3RsIGluc3BlY3QgLW8ganNvbiAkQ09OVEFJTkVSX0lEIHxqcSAnLnN0YXR1cy5sb2dQYXRoJykKICBpZiAhIHZhcl9kZWZpbmVkICRMT0dfTkFNRTsgdGhlbgogICAgcmV0dXJuIDEKICBmaQogIExPR19OQU1FPSR7TE9HX05BTUUvL1wiL30KICBsb2NhbCBMQVNUX1NUQVRVUz0kKHRhaWwgLTIwMDAgJExPR19OQU1FIHxncmVwICJdIG1hc3RlciBvZmZzZXQiIHx0YWlsIC0xKQogIGlmICEgdmFyX2RlZmluZWQgJExBU1RfU1RBVFVTOyB0aGVuCiAgICByZXR1cm4gMQogIGZpCiAgZWNobyAiJHtMQVNUX1NUQVRVU30iCiAgbG9nX2RlYnVnICIke0xBU1RfU1RBVFVTfSIKICByZXR1cm4gMAp9CgojIEdldCB0aGUgdGltZSBvZmZzZXQgYW5kIGFzc29jaWF0ZWQgdGltZXN0YW1wIGZyb20gcHRwNGwgbG9nIGxpbmUKIyBBUkdVTUVOVFM6CiMgICBub25lCiMgR0xPQkFMOgojICAgU1lOQ19BR0UgLSBNYXhpbXVtIGFsbG93ZWQgYWdlIGluIHNlY29uZHMgb2YgYSBsb2cgbGluZSB0byBiZSBjb25zaWRlcmVkIHZhbGlkCiMgICAgIGZvciBzeW5jIGV2YWx1YXRpb24KIyBPVVRQVVQ6CiMgICBBQlNfT0ZGU0VUX1ZBTFVFIC0gaW4gbnMKIyBSRVRVUk46CiMgICAwIGlmIHRpbWUgb2Zmc2V0IGlzIHZhbGlkLCAxIGlmIG5vdApnZXRfcHRwX29mZnNldCgpIHsKICBsb2NhbCBMQVNUX1NUQVRVUwogIExBU1RfU1RBVFVTPSQoZ2V0X2xhc3RfcHRwX3N0YXR1cykKICAKICBpZiBbWyAkPyAtbmUgMCBdXTsgdGhlbgogICAgbG9nX2RlYnVnICJObyB2YWxpZCBsaW51eHB0cCBzdGF0dXMuIgogICAgcmV0dXJuIDEKICBmaQogIGxvY2FsIFNUUklOR19BUlJBWT0oJExBU1RfU1RBVFVTKQogIGxvY2FsIE9GRlNFVF9EQVRFPSR7U1RSSU5HX0FSUkFZWzBdfQogIGRlY2xhcmUgLWkgT0ZGU0VUX1ZBTFVFCiAgT0ZGU0VUX1ZBTFVFPSR7U1RSSU5HX0FSUkFZWzddfQogIGRlY2xhcmUgLWkgQUJTX09GRlNFVF9WQUxVRQogIGxvY2FsIEFCU19PRkZTRVRfVkFMVUU9JChhYnMgJE9GRlNFVF9WQUxVRSkKICBsb2dfZGVidWcgIlBUUCBvZmZzZXQ6ICRPRkZTRVRfVkFMVUUsIGFicyBvZmZzZXQgJEFCU19PRkZTRVRfVkFMVUUsdGltZXN0YW1wICRPRkZTRVRfREFURSIKCiAgIyBDaGVjayBob3cgZnJlc2ggaXMgdGhlIG9mZnNldCBtZWFzdXJlbWVudCB0byBwcm90ZWN0CiAgIyBmcm9tIGxvb2tpbmcgYXQgdGhlIG9sZCBsb2cgdGhhdCBoYXMgbm90IGJlZW4gY2xlYW5lZCBmcm9tIHRoZSBzeXN0ZW0KICBsb2NhbCBDVVJSRU5UX1RJTUU9IiQoZGF0ZSArJXMuJU4pIiAjIGN1cnJlbnQgZGF0ZSBpbiBuYW5vc2Vjb25kcwogIGxvY2FsIE9GRlNFVF9USU1FU1RBTVA9IiQoZGF0ZSArJXMuJU4gLWQgIiRPRkZTRVRfREFURSIpIiAjIG1lYXN1cmVtZW50IGRhdGUgaW4gbnMKICBsb2NhbCBUSU1FX0RJRkY9JChhd2sgJ3twcmludCAkMS0kMn0nIDw8PCIke0NVUlJFTlRfVElNRX0gJHtPRkZTRVRfVElNRVNUQU1QfSIpCiAgZWNobyAiJHtBQlNfT0ZGU0VUX1ZBTFVFfSIKICBpZiAkKGdyZWF0ZXIgJFRJTUVfRElGRiAkU1lOQ19BR0UpOyB0aGVuCiAgICByZXR1cm4gMQogIGVsc2UKICAgIHJldHVybiAwCiAgZmkKfQoKIyBDaGVjayBpZiBQVFAgaXMgc3luY2VkCiMgQVJHVU1FTlRTOgojICAgbm9uZQojIEdMT0JBTDoKIyAgIFNZTkNfTUFSS0VSX1BBVEggLSBGaWxlIGZvciBzdGFydGluZyBjaHJvbnlkIGNvbmRpdGlvbmFsbHkuIFVzZWQgdG8gZmluZCB0aGUgCiMgICAgICBsYXN0IGtub3duIHB0cCBzeW5jIHN0YXRlIGFuZCBhcHBseSBoeXN0ZXJlc2lzIHRocmVzaG9sZAojICAgTUFYX09GRlNFVCAtIE1heGltdW0gYWxsb3dlZCBjbG9jayBvZmZzZXQgaW4gbmFub3NlY29uZHMKIyAgIE9GRlNFVF9USFJFU0hPTEQgLSBoeXN0ZXJlc2lzIHRocmVzaG9sZAojICAgQUJTX09GRlNFVF9WQUxVRSAtIFBUUCBjbG9jayBvZmZzZXQKIyBPVVRQVVQ6CiMgICBub25lCiMgUkVUVVJOOgojICAgMCBpZiB0aGUgb2Zmc2V0IGlzIHdpdGhpbiB0aGUgYm91bmRhcmllcywgMSBpZiBub3QKcHRwX3N5bmNlZCgpIHsKICBkZWNsYXJlIC1pIE9GRlNFVAogIE9GRlNFVD0kKGdldF9wdHBfb2Zmc2V0KQogIGlmIFtbICQ/IC1uZSAwIF1dOyB0aGVuCiAgICBsb2dfZGVidWcgIk5vIHZhbGlkIHB0cCBvZmZzZXQuIgogICAgcmV0dXJuIDEKICBmaQogIGlmIFtbIC1mICIkU1lOQ19NQVJLRVJfUEFUSCIgXV07IHRoZW4KICAgIGxvZ19kZWJ1ZyAiTGFzdCBrbm93biBwdHAgc3RhdGUgLSBzeW5jaHJvbml6ZWQiCiAgICAoKE1BWF9PRkZTRVQ9TUFYX09GRlNFVCtPRkZTRVRfVEhSRVNIT0xEKSkKICBlbHNlCiAgICBsb2dfZGVidWcgIkxhc3Qga25vd24gcHRwIHN0YXRlIC0gdW5zeW5jaHJvbml6ZWQiCiAgICAoKE1BWF9PRkZTRVQ9TUFYX09GRlNFVC1PRkZTRVRfVEhSRVNIT0xEKSkKICBmaQogIGlmIFsgJE9GRlNFVCAtZ3QgJE1BWF9PRkZTRVQgXTsgdGhlbgogICAgcmV0dXJuIDEKICBmaQogIHJldHVybiAwCn0KCgojIElmIHB0cCBpcyBzeW5jZWQgYW5kIHRoZSBvZmZzZXQgaXMgdmFsaWQsIGNyZWF0ZSBjaHJvbnlkIG1hcmtlcgojIE90aGVyd2lzZSBkZWxldGUgdGhlIG1hcmtlcgptYWluKCkgewogIGlmIHB0cF9zeW5jZWQ7IHRoZW4KICAgIGxvZ19kZWJ1ZyAiZW5zdXJlICRTWU5DX01BUktFUl9QQVRIIGV4aXN0cyIKICAgIHRvdWNoICRTWU5DX01BUktFUl9QQVRICiAgZWxzZQogICAgbG9nX2RlYnVnICJlbnN1cmUgJFNZTkNfTUFSS0VSX1BBVEggZG9lcyBub3QgZXhpc3QiCiAgICBybSAkU1lOQ19NQVJLRVJfUEFUSCAmPiAvZGV2L251bAogIGZpCn0KCmlmIFtbICIke0JBU0hfU09VUkNFWzBdfSIgPSAiJHswfSIgXV07IHRoZW4KICBtYWluICIke0B9IgogIGV4aXQgJD8KZmkK
                mode: 493
                path: /usr/local/bin/ptp-sync-check
              - contents:
                  source: data:text/plain;charset=utf-8;base64,IyEvYmluL2Jhc2gKIyBSdW4gUFRQIHN0YXRlIGV2YWx1YXRpb24gc2NyaXB0IGFuZCByZXN0YXJ0IHRoZSBjaHJvbnlkLnNlcnZpY2UKL3Vzci9sb2NhbC9iaW4vcHRwLXN5bmMtY2hlY2sKL2Jpbi9zeXN0ZW1jdGwgcmVzdGFydCBjaHJvbnlkLnNlcnZpY2U=
                mode: 493
                path: /usr/local/bin/restart-chronyd
            systemd:
              units:
              - contents: |
                  [Unit]
                  Description=Restart chronyd

                  [Service]
                  Type=oneshot
                  Environment=MAX_OFFSET=100000
                  Environment=OFFSET_THRESHOLD=20000
                  Environment=SYNC_AGE=600
                  ExecStart=/usr/local/bin/restart-chronyd
                name: chronyd-restart.service
              - contents: |
                  [Unit]
                  Description=Restart chronyd periodically

                  [Timer]
                  OnCalendar=*:0/5

                  [Install]
                  WantedBy=timers.target
                enabled: true
                name: chronyd-restart.timer
              - dropins:
                - contents: |-
                    [Unit]
                    ConditionPathExists=!/var/run/ptp/insync
                  name: 20-conditional-start.conf
                name: chronyd.service
kind: ConfigMap
metadata:
    annotations:
        argocd.argoproj.io/sync-wave: "1"
    name: cluster1
    namespace: cluster1
---
apiVersion: cluster.open-cluster-management.io/v1
kind: ManagedCluster
metadata:
    annotations:
        argocd.argoproj.io/sync-wave: "2"
    name: cluster1
spec:
    hubAcceptsClient: true
---
apiVersion: agent.open-cluster-management.io/v1
kind: KlusterletAddonConfig
metadata:
    annotations:
        argocd.argoproj.io/sync-wave: "2"
    name: cluster1
    namespace: cluster1
spec:
    applicationManager:
        enabled: true
    certPolicyController:
        enabled: false
    clusterLabels:
        cloud: auto-detect
        vendor: auto-detect
    clusterName: cluster1
    clusterNamespace: cluster1
    iamPolicyController:
        enabled: false
    policyController:
        enabled: true
    searchCollector:
        enabled: false
